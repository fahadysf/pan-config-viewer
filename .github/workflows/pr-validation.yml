name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          fix
          feat
          docs
          style
          refactor
          perf
          test
          build
          ci
          chore
          revert
        requireScope: false
        subjectPattern: ^(?![A-Z]).+$
        subjectPatternError: |
          The subject "{subject}" found in the pull request title "{title}"
          didn't match the configured pattern. Please ensure that the subject
          doesn't start with an uppercase character.
    
    - name: Check file changes
      run: |
        echo "## Changed Files" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Modified Files:" >> $GITHUB_STEP_SUMMARY
        git diff --name-only origin/${{ github.base_ref }}...HEAD | head -20 >> $GITHUB_STEP_SUMMARY
    
    - name: Check for merge conflicts
      run: |
        git fetch origin ${{ github.base_ref }}
        if git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -q "<<<<<<< "; then
          echo "❌ Merge conflicts detected" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ No merge conflicts" >> $GITHUB_STEP_SUMMARY
        fi

  test-changes:
    name: Test PR Changes
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-type: [python, javascript]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Detect changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          python:
            - '**/*.py'
            - 'requirements.txt'
            - 'setup.py'
            - 'pytest.ini'
          javascript:
            - '**/*.js'
            - '**/*.jsx'
            - 'package.json'
            - 'package-lock.json'
            - 'jest.config.js'
    
    - name: Set up Python
      if: matrix.test-type == 'python' && steps.changes.outputs.python == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set up Node.js  
      if: matrix.test-type == 'javascript' && steps.changes.outputs.javascript == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install Python dependencies
      if: matrix.test-type == 'python' && steps.changes.outputs.python == 'true'
      run: |
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install fastapi uvicorn pydantic httpx
    
    - name: Install JavaScript dependencies
      if: matrix.test-type == 'javascript' && steps.changes.outputs.javascript == 'true'
      run: npm ci
    
    - name: Run Python tests
      if: matrix.test-type == 'python' && steps.changes.outputs.python == 'true'
      run: |
        python main.py &
        sleep 5
        python -m pytest tests/ -v --tb=short || true
    
    - name: Run JavaScript tests
      if: matrix.test-type == 'javascript' && steps.changes.outputs.javascript == 'true'
      run: npm test || true
    
    - name: Comment test results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const testType = '${{ matrix.test-type }}';
          const passed = '${{ job.status }}' === 'success';
          const emoji = passed ? '✅' : '❌';
          const status = passed ? 'passed' : 'failed';
          
          const comment = `${emoji} ${testType.charAt(0).toUpperCase() + testType.slice(1)} tests ${status}`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes(`${testType.charAt(0).toUpperCase() + testType.slice(1)} tests`)
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  code-review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run code review
      uses: actions/github-script@v7
      with:
        script: |
          const diff = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            mediaType: {
              format: 'diff'
            }
          });
          
          // Basic checks
          const suggestions = [];
          
          // Check for console.log statements
          if (diff.data.includes('console.log')) {
            suggestions.push('⚠️ Found console.log statements - consider removing for production');
          }
          
          // Check for TODO comments
          if (diff.data.includes('TODO') || diff.data.includes('FIXME')) {
            suggestions.push('📝 Found TODO/FIXME comments - consider creating issues for these');
          }
          
          // Check for large files
          const lines = diff.data.split('\n').length;
          if (lines > 1000) {
            suggestions.push('📦 Large PR detected - consider breaking into smaller PRs');
          }
          
          if (suggestions.length > 0) {
            const body = `## Automated Code Review\n\n${suggestions.join('\n')}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

  pr-summary:
    name: Generate PR Summary
    runs-on: ubuntu-latest
    needs: [validate-pr, test-changes]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate summary
      run: |
        echo "## Pull Request Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### PR Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Number:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Author:** @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Branch:** ${{ github.base_ref }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Head Branch:** ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Validation Status" >> $GITHUB_STEP_SUMMARY
        echo "- PR Title: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Merge Conflicts: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: 🔄 See individual test results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review test results" >> $GITHUB_STEP_SUMMARY
        echo "2. Address any failing tests" >> $GITHUB_STEP_SUMMARY
        echo "3. Request code review from maintainers" >> $GITHUB_STEP_SUMMARY
        echo "4. Merge when all checks pass" >> $GITHUB_STEP_SUMMARY