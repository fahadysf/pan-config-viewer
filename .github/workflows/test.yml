name: Comprehensive Tests

on:
  push:
    branches: [ main, master, develop, 'feature/**', 'fix/**' ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20.x'

jobs:
  backend-tests:
    name: Backend Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio pytest-timeout
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Create test config files
      run: |
        mkdir -p config-files
        # Create a minimal test XML if needed
        echo '<?xml version="1.0"?><config></config>' > config-files/test-config.xml
    
    - name: Run unit tests with coverage
      run: |
        # Run all Python tests with coverage
        pytest tests/ -v \
          --cov=. \
          --cov-report=xml \
          --cov-report=term \
          --cov-report=html:htmlcov \
          --timeout=60 \
          -W ignore::DeprecationWarning \
          || true
    
    - name: Run functional tests
      run: |
        # Start the API server in background
        python main.py &
        SERVER_PID=$!
        
        # Wait for server to be ready
        for i in {1..30}; do
          if curl -f http://localhost:8000/health 2>/dev/null; then
            echo "Server is ready"
            break
          fi
          echo "Waiting for server... ($i/30)"
          sleep 1
        done
        
        # Run API tests
        if [ -f tests/test_integrated_pagination_filtering.py ]; then
          pytest tests/test_integrated_pagination_filtering.py -v || true
        fi
        
        # Kill the server
        kill $SERVER_PID || true
    
    - name: Upload Python coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: backend,python-${{ matrix.python-version }}
        name: Backend-Python-${{ matrix.python-version }}
      if: always()
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: python-coverage-${{ matrix.python-version }}
        path: htmlcov/
      if: always()

  frontend-tests:
    name: Frontend Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x', '22.x']
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm ci
        # Install additional test dependencies if needed
        npm install --save-dev @testing-library/react @testing-library/jest-dom @testing-library/user-event
    
    - name: Run frontend unit tests
      working-directory: frontend
      run: |
        # Run tests with coverage
        npm test -- \
          --coverage \
          --coverageReporters=json \
          --coverageReporters=lcov \
          --coverageReporters=text \
          --coverageReporters=html \
          --watchAll=false \
          || true
    
    - name: Build frontend
      working-directory: frontend
      run: |
        npm run build
        echo "Frontend build successful ✅"
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend,node-${{ matrix.node-version }}
        name: Frontend-Node-${{ matrix.node-version }}
      if: always()
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage-${{ matrix.node-version }}
        path: frontend/coverage/
      if: always()

  build-tests:
    name: Build Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Test Python build
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        
        # Install dependencies
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
        # Test that the application can be imported
        python -c "import main; print('✅ Python import successful')"
        
        # Create distribution if setup.py exists
        if [ -f setup.py ]; then
          python setup.py sdist bdist_wheel
          echo "✅ Python package build successful"
        fi
    
    - name: Test frontend build
      working-directory: frontend
      run: |
        npm ci
        npm run build
        
        # Verify build output
        if [ -d "../static/dist" ]; then
          echo "✅ Frontend build output verified at static/dist"
          ls -la ../static/dist/
        else
          echo "⚠️ Frontend build output not found at expected location"
        fi
    
    - name: Test full application startup
      run: |
        # Install all dependencies
        pip install -r requirements.txt
        
        # Start application
        python main.py &
        APP_PID=$!
        
        # Wait for startup
        for i in {1..30}; do
          if curl -f http://localhost:8000/health 2>/dev/null; then
            echo "✅ Application started successfully"
            
            # Test API endpoint
            curl -s http://localhost:8000/api/v1/configs | jq . || true
            
            # Test frontend is served
            curl -s http://localhost:8000/ | grep -q "<title>" && echo "✅ Frontend is served"
            
            break
          fi
          echo "Waiting for application startup... ($i/30)"
          sleep 1
        done
        
        # Cleanup
        kill $APP_PID || true

  docker-tests:
    name: Docker Build Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test Docker build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        tags: |
          pan-config-viewer:test
          pan-config-viewer:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        # Run the container
        docker run -d \
          --name test-container \
          -p 8001:8000 \
          -v $(pwd)/config-files:/app/config-files \
          pan-config-viewer:test
        
        # Wait for container to be healthy
        for i in {1..30}; do
          if docker exec test-container curl -f http://localhost:8000/health 2>/dev/null; then
            echo "✅ Container is healthy"
            break
          fi
          echo "Waiting for container... ($i/30)"
          sleep 1
        done
        
        # Test API from outside container
        curl -f http://localhost:8001/api/v1/configs && echo "✅ API accessible from host"
        
        # Check container logs
        docker logs test-container
        
        # Cleanup
        docker stop test-container
        docker rm test-container
    
    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: pan-config-viewer:test
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true
    
    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, build-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install all dependencies
      run: |
        # Python
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-timeout httpx
        
        # Frontend
        cd frontend && npm ci && cd ..
    
    - name: Build frontend for integration tests
      working-directory: frontend
      run: npm run build
    
    - name: Run full integration tests
      run: |
        # Start the application
        python main.py &
        APP_PID=$!
        
        # Wait for startup
        for i in {1..30}; do
          if curl -f http://localhost:8000/health 2>/dev/null; then
            break
          fi
          sleep 1
        done
        
        # Run integration test suite
        if [ -f tests/test_integration.py ]; then
          pytest tests/test_integration.py -v || true
        fi
        
        # Test API endpoints
        echo "Testing API endpoints..."
        curl -f http://localhost:8000/api/v1/configs || true
        curl -f http://localhost:8000/docs || true
        
        # Test frontend routing
        echo "Testing frontend routes..."
        curl -f http://localhost:8000/ || true
        
        # Cleanup
        kill $APP_PID || true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, build-tests, docker-tests, integration-tests]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate test summary
      run: |
        echo "## 📊 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### ✅ Test Status" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Tests | ${{ needs.build-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Tests | ${{ needs.docker-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📝 Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Node Version**: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.backend-tests.result }}" == "success" ] && \
           [ "${{ needs.frontend-tests.result }}" == "success" ] && \
           [ "${{ needs.build-tests.result }}" == "success" ] && \
           [ "${{ needs.docker-tests.result }}" == "success" ]; then
          echo "### ✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ⚠️ Some tests did not pass. Please review the logs." >> $GITHUB_STEP_SUMMARY
        fi