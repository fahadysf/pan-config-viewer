name: Run Tests

on:
  push:
    branches: [ main, master, develop, 'feature/**', 'fix/**' ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  python-tests:
    name: Python API Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Install FastAPI and related packages
        pip install fastapi uvicorn pydantic httpx
    
    - name: Start API server
      run: |
        # Start the API server in the background
        python main.py &
        # Wait for server to be ready
        sleep 5
        # Check if server is running
        curl -f http://localhost:8000/docs || exit 1
      continue-on-error: false
    
    - name: Run Python tests with coverage
      run: |
        python -m pytest tests/test_integrated_pagination_filtering.py -v --cov=. --cov-report=xml --cov-report=term
      continue-on-error: true
    
    - name: Upload Python coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: python
        name: Python-${{ matrix.python-version }}
      if: always()

  javascript-tests:
    name: JavaScript Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x', '21.x']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
    
    - name: Run JavaScript tests with coverage
      run: |
        npm test -- --coverage --coverageReporters=json --coverageReporters=lcov --coverageReporters=text
      continue-on-error: true
    
    - name: Upload JavaScript coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: javascript
        name: JavaScript-Node-${{ matrix.node-version }}
      if: always()

  integration-tests:
    name: Full Integration Tests
    runs-on: ubuntu-latest
    needs: [python-tests, javascript-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install all dependencies
      run: |
        # Python dependencies
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install fastapi uvicorn pydantic httpx
        
        # JavaScript dependencies
        npm ci
    
    - name: Start API server for integration tests
      run: |
        python main.py &
        sleep 5
        curl -f http://localhost:8000/docs || exit 1
    
    - name: Run all tests
      run: |
        # Run Python tests
        python -m pytest tests/ -v --tb=short || true
        
        # Run JavaScript tests
        npm test || true
    
    - name: Test Summary
      if: always()
      run: |
        echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Python Tests" >> $GITHUB_STEP_SUMMARY
        python -m pytest tests/test_integrated_pagination_filtering.py --co -q | head -20 >> $GITHUB_STEP_SUMMARY || echo "Python tests execution details not available" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### JavaScript Tests" >> $GITHUB_STEP_SUMMARY
        npm test -- --listTests 2>/dev/null | head -20 >> $GITHUB_STEP_SUMMARY || echo "JavaScript tests execution details not available" >> $GITHUB_STEP_SUMMARY

  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Python Linting
      run: |
        pip install flake8 black mypy
        # Run flake8 with relaxed rules for now
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true
        # Check black formatting (don't fail)
        black --check . --diff || true
      continue-on-error: true
    
    - name: JavaScript Linting
      run: |
        npm install -g eslint
        # Run eslint if config exists
        if [ -f .eslintrc.json ] || [ -f .eslintrc.js ]; then
          eslint . --ext .js,.jsx || true
        else
          echo "No ESLint configuration found, skipping JavaScript linting"
        fi
      continue-on-error: true

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Python security checks
      run: |
        pip install safety bandit
        # Check for known security vulnerabilities
        safety check || true
        # Run bandit security linter
        bandit -r . -f json -o bandit-report.json || true
      continue-on-error: true
    
    - name: Run npm audit
      run: |
        npm audit --audit-level=high || true
      continue-on-error: true